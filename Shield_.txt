@name Shield 
@outputs X Y Z Displacement:vector TargetPosition:vector ShieldLocation:vector Target:entity E2s:array Targets:array T
@outputs V1:vector V2:vector U:vector N:vector Distance Index I Offset:vector Rotate Attack:array Increment

if (first() || dupefinished())
{
    runOnTick(1)  
    
    runOnChat(1)

    findIncludeClass("energy_pulse")
    findIncludeClass("rpg_missile")
    findIncludeClass("gmod_wire_expression2")
    findInSphere(entity():owner():pos(), 10000)
    Targets = findToArray()
    
    E2s = array()
    
    Added = 0
    
    I = 1
    while (I <= Targets:count())
    {
        if (Targets[I, entity]:getName() == "Shield")
        {
            E2s:pushNumber(Targets[I, entity]:id())
            
            Targets:removeEntity(I)
        }
        else
        {
            I++
        }
    } 
    
    #Sort the list of E2s by their ID. Bubble sort cause I'm lazy and the list isn't very large anyway.
    I = E2s:count()
    while (I > 0)
    {
        X = 1
        while (X <= I)
        {
            if (E2s[X, number] > E2s[X + 1, number])
            {
                Temp = E2s[X + 1, number]
                E2s[X + 1, number] = E2s[X, number]
                E2s[X, number] = Temp
            }
            
            X++   
        }
        
        I--
    }
    
    E2s:removeNumber(1)
    
    Added = 0
    
    #Insert the current entity where it belongs.
    I = 1
    while (I <= E2s:count())
    {
        if (entity():id() < E2s[I, number])
        {
            E2s:insertNumber(I, entity():id())   
            
            Added = 1
            
            break
        }
        
        I++
    }
    
    if (!Added)
    {
        E2s:pushNumber(entity():id())
    }
    
    for (I = 1, E2s:count())
    {
        if (E2s[I, number] == entity():id())
        {
            Index = I   
        }   
    }

    Increment = 30
    
    if (Increment * E2s:count() > 360)
    {
        Increment = 360 / E2s:count()   
    }
    
    T = Increment * Index

    Distance = 400
    
    Offset = vec(0, 0, 100)
    
    Rotate = 0.2
}

if (chatClk(entity():owner()))
{
    Message = lastSaid()
    
    if (Message == "r")
    {
        hideChat(1)
        
        reset()
    }   
    elseif (Message[1] == "a")
    {
        hideChat(1)
        
        Attack:pushString(Message:sub(2):trim())
    }
    elseif (Message:sub(1,2) == "sa")
    {
        hideChat(1)
        
        if (Message:length() < 3)
        {
            Attack = array()   
        }
        
        I = 1
        while (I <= Attack:count())
        {
            if (Attack[I, string] == Message:sub(3):trim())
            {
                Attack:removeString(I)
                
                break   
            }
        } 
    }
    else
    {
        Params = Message:explode(" ")
        
        if (Params[1, string] == "d")
        {
            hideChat(1)
        
            Distance = Params[2, string]:toNumber()
        }
        elseif (Params[1, string] == "o")
        {
            hideChat(1)
        
            Offset = vec(Params[2, string]:toNumber(), Params[3, string]:toNumber(), Params[4, string]:toNumber())
        }
        elseif (Params[1, string] == "rt")
        {
            hideChat(1)
            
            Rotate = Params[2, string]:toNumber()   
        }
        elseif (Params[1, string] == "i")
        {
            hideChat(1)
            
            Increment = Params[2, string]:toNumber()   
            
            T = Increment * Index
        }
    }
}

ShieldLocation = entity():owner():pos()

findIncludeClass("energy_pulse")
findIncludeClass("rpg_missile")
findInSphere(ShieldLocation, 10000)
Targets = findToArray()

I = 1
while (I <= Targets:count())
{
    if (Targets[I, entity]:getName() == "Shield")
    {
        Targets:removeEntity(I)
    }
    else
    {
        I++
    }
}

Target = Targets[Index, entity]

TargetPosition = Target:pos()
    
if (!entity():isWeldedTo():isFrozen())
{
    T += Rotate
    
    if (T > 360)
    {
        T = 0   
    }   
}

if (Attack:count() == 0 || Index > Attack:count())
{
    V1 = ShieldLocation - Displacement
    V2 = ShieldLocation - TargetPosition
    N = V1:cross(V2):normalized()
    U = V1:normalized()
    
    if (TargetPosition == vec(0, 0, 0))
    {
        U = vec(1, 0, 0)
        N = vec(0, 0, 1)
        
        ShieldLocation += Offset
    
        Displacement = Distance * cos(T) * U + Distance * sin(T) * N:cross(U) + ShieldLocation
    }
    else
    {
        Displacement = (TargetPosition - ShieldLocation):normalized()
        Displacement = Displacement * Distance + ShieldLocation
    }
}
elseif (Index <= Attack:count())
{
    Players = players()
    
    for (I = 1, Players:count())
    {
        if (Players[I, entity]:name() == Attack[Index, string])
        {
            Displacement = Players[I, entity]:pos()
            
            break   
        }   
    }
}

Mass = entity():isWeldedTo():mass()
Speed = 20

X = (Displacement:x() - entity():pos():x()) * Mass * Speed - entity():vel():x()
Y = (Displacement:y() - entity():pos():y()) * Mass * Speed - entity():vel():y()
Z = (Displacement:z() - entity():pos():z()) * Mass * Speed - entity():vel():z()

entity():isWeldedTo():applyForce(vec(X, Y, Z))
